version: "3.9"

services:
  frontend:
    image: sermalenk/skypro-front:lesson-38
    restart: always
    depends_on:
      - api
    ports:
      - 80:80
  postgres:
    image: postgres:12.4-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_DB: $DB_NAME
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME"]
      interval: 5s
      timeout: 5s
      retries: 5
  migrations:
    image: irka887/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    command: python manage.py migrate
  api:
    image: irka887/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    restart: always
    env_file:
      - .env
  bot:
    image: irka887/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    restart: always
    depends_on:
      migrations:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    environment:
      DB_USER: $DB_USER
      DB_PASSWORD: $DB_PASSWORD
      DB_NAME: $DB_NAME
      DB_HOST: 'postgres'
      SECRET_KEY: $SECRET_KEY
      SOCIAL_AUTH_VK_OAUTH2_KEY: $SOCIAL_AUTH_VK_OAUTH2_KEY
      SOCIAL_AUTH_VK_OAUTH2_SECRET: $SOCIAL_AUTH_VK_OAUTH2_SECRET
      BOT_TOKEN: $BOT_TOKEN
    command: python3 manage.py runbot

volumes:
  postgres_data:
